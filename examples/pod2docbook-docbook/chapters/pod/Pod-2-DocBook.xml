<!--
     Generated by Pod::2::DocBook v0.02_01, using:
       Digest::MD5 v2.36_01
       Pod::Parser v1.35
       Pod::ParseLink v1.06
       Text::ParseWords v3.26
       Text::Wrap v2006.1117
-->
<section><title>Pod-2-DocBook POD</title>
  <section id="ID-58242115eaaf2c95bbef44b2d63e2b74"><title>NAME</title>
    <para>
      Pod::2::DocBook - Convert Pod data to DocBook SGML
    </para>
  </section>
  <section id="ID-51d50f687f0442c7221c18d338b95ece"><title>SYNOPSIS</title>
    <screen><![CDATA[use Pod::2::DocBook;
my $parser = Pod::2::DocBook->new (title             => 'My Article',
                                   doctype           => 'article',
                fix_double_quotes => 1,
                spaces            => 3);

$parser->parse_from_file ('my_article.pod', 'my_article.sgml');]]></screen>
  </section>
  <section id="ID-7fca5888c7cf9b8e58f198fe9bb00892"><title>DESCRIPTION</title>
    <para>
      Pod::2::DocBook is a module for translating Pod-formatted documents
      to DocBook 4.2 SGML (see <ulink
      url="http://www.docbook.org/">http://www.docbook.org/</ulink>).  It
      is primarily a back end for <emphasis
      role="bold">pod2docbook</emphasis>, but, as a Pod::Parser subclass,
      it can be used on its own.  The only public extensions to the
      Pod::Parser interface are options available to <literal
      role="code"><![CDATA[new()]]></literal>:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor id="ID-97457a93826eedeb05c02ef412ea7147" />doctype</term>
          <listitem>
            <para>
	      This option sets the output document's doctype.  The
	      currently supported types are <emphasis
	      role="bold">article</emphasis>, <emphasis
	      role="bold">chapter</emphasis>, <emphasis
	      role="bold">refentry</emphasis> and <emphasis
	      role="bold">section</emphasis>.  Special processing is
	      performed when the doctype is set to <emphasis
	      role="bold">refentry</emphasis> (see <link
	      linkend="ID-3b19848ad8becd5b034cca6ea6b57eb7"><quote>Document
	      Types</quote></link>).  You <emphasis
	      role="italic">must</emphasis> set this option in order to get
	      valid DocBook output.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-5cac6bd3f4fd21d5bba16d572aca5bda" />fix_double_quotes</term>
          <listitem>
            <para>
	      If this option is set to a true value, pairs of double quote
	      characters ('"') in ordinary paragraphs will be replaced with
	      <emphasis role="bold">&lt;quote&gt;</emphasis> and <emphasis
	      role="bold">&lt;/quote&gt;</emphasis>.  See <link
	      linkend="ID-3ccb626553ea01666dc8d94204d1ed36"><quote>Ordinary
	      Paragraphs</quote></link> for details.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-db2645470fa03b14a816600681467ea6" />header</term>
          <listitem>
            <para>
	      If this option is set to a true value, Pod::2::DocBook will
	      emit a DOCTYPE as the first line of output.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-081bece647d5723a268cc579c95695c9" />spaces</term>
          <listitem>
            <para>
	      Pod::2::DocBook produces pretty-printed output.  This option
	      sets the number of spaces per level of indentation in the
	      output.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-1efdce179ab82fed2547288f3cb83409" />title</term>
          <listitem>
            <para>
	      This option sets the output document's title.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      The rest of this document only describes issues specific to
      Pod::2::DocBook; for details on invoking the parser, specifically the
      <literal role="code"><![CDATA[new()]]></literal>, <literal
      role="code"><![CDATA[parse_from_file()]]></literal> and <literal
      role="code"><![CDATA[parse_from_filehandle()]]></literal> methods,
      see <citerefentry> <refentrytitle>Pod::Parser</refentrytitle>
      </citerefentry>.
    </para>
  </section>
  <section id="ID-faea5325c66b171909c6af7991e2a31f"><title>METHODS</title>
    <screen><![CDATA[our @ISA     = qw(Pod::Parser);]]></screen>
    <section id="ID-d1724f2a982547518ebb3549b36dec25"><title>initialize()</title>
      <para>
	Initialize parser.
      </para>
    </section>
    <section id="ID-0e6090522fd23cecce3cb9c3cf889630"><title>begin_pod()</title>
      <para>
	Output docbook header stuff.
      </para>
    </section>
    <section id="ID-f439f7926feaa39e72ea057344c5f180"><title>end_pod()</title>
      <para>
	Output docbook footer. Will print also errors if any in a comment
	block.
      </para>
    </section>
    <section id="ID-7e6511bbe86ad9e29095606006c834d8"><title>commans($command, $paragraph, $line_num)</title>
      <para>
	Process POD commands.
      </para>
    </section>
    <section id="ID-362d73f74172f5a0b0d893f468b9b056"><title>textblock ($paragraph, $line_num)</title>
      <para>
	Process text block.
      </para>
    </section>
    <section id="ID-710ee12a6f599f38ce749576d20ab53c"><title>verbatim($paragraph, $line_num)</title>
      <para>
	Process verbatim text block.
      </para>
    </section>
    <section id="ID-36e8760b78618aef1500bf615209c633"><title>interior_sequence($command, $argument, $seq)</title>
      <para>
	Process formatting commands.
      </para>
    </section>
    <section id="ID-da47f16eccd995c704463ee59f9ba1f8"><title>error_msg</title>
      <para>
	Returns parser error message(s) if any occured.
      </para>
    </section>
  </section>
  <section id="ID-ed297956aaf9b499f9ed1f548415f708"><title>POD TO DOCBOOK TRANSLATION</title>
    <para>
      Pod is a deceptively simple format; it is easy to learn and very
      straightforward to use, but it is suprisingly expressive.
      Nevertheless, it is not nearly as expressive or complex as DocBook.
      In most cases, given some Pod, the analogous DocBook markup is
      obvious, but not always.	This section describes how Pod::2::DocBook
      treats Pod input so that Pod authors may make informed choices.  In
      every case, Pod::2::DocBook strives to make easy things easy and hard
      things possible.
    </para>
    <para>
      The primary motivation behind Pod::2::DocBook is to facilitate
      single-source publishing.  That is, you should be able to generate
      man pages, web pages, PDF and PostScript documents, or any other
      format your SGML and/or Pod tools can produce, from the same Pod
      source, without the need for hand-editing any intermediate files. 
      This may not always be possible, or you may simply choose to render
      Pod to DocBook and use that as your single source.  To satisfy the
      first requirement, Pod::2::DocBook always processes the entire Pod
      source and tries very hard to produce valid DocBook markup, even in
      the presence of malformed Pod (see <link
      linkend="ID-27c872f13298ab7cc42f6e59e6373302"><quote>DIAGNOSTICS</quote></link>).
       To satisfy the second requirement (and to be a little nifty),
      Pod::2::DocBook pretty-prints its output.  If you're curious about
      what specific output to expect, read on.
    </para>
    <section id="ID-3b19848ad8becd5b034cca6ea6b57eb7"><title>Document Types</title>
      <para>
	DocBook's structure is very modular; many of its document types can
	be embedded directly into other documents.  Accordingly,
	Pod::2::DocBook will generate four different document types:
	<emphasis role="bold">article</emphasis>, <emphasis
	role="bold">chapter</emphasis>, <emphasis
	role="bold">refentry</emphasis>, and <emphasis
	role="bold">section</emphasis>.  This makes it easy, for instance,
	to write all the chapters of a book in separate Pod documents,
	translate them into DocBook markup and later glue them together
	before processing the entire book.  You could do the same with each
	section in an article, or you could write the entire article in a
	single Pod document.  Other document types, such as <emphasis
	role="bold">book</emphasis> and <emphasis
	role="bold">set</emphasis>, do not map easily from Pod, because
	they require structure for which there is no Pod equivalent.  But
	given sections and chapters, making larger documents becomes much
	simpler.
      </para>
      <para>
	The <emphasis role="bold">refentry</emphasis> document type is a
	little different from the others. Sections, articles, and chapters
	are essentially composed of nested sections.  But a refentry has
	specialized elements for the <emphasis
	role="italic">NAME</emphasis> and <emphasis
	role="italic">SYNOPSIS</emphasis> sections.  To accommodate this,
	Pod::2::DocBook performs extra processing on the Pod source when
	the <emphasis role="bold">doctype</emphasis> is set to <emphasis
	role="bold">refentry</emphasis>.  You probably don't have to do
	anything to your document to assist the processing; typical man
	page conventions cover the requirements.  Just make sure that the
	<emphasis role="italic">NAME</emphasis> and <emphasis
	role="italic">SYNOPSIS</emphasis> headers are both <emphasis
	role="bold">=head1</emphasis>s, that "NAME" and "SYNOPSIS" are both
	uppercase, and that <emphasis role="bold">=head1 NAME</emphasis> is
	the first line of Pod source.
      </para>
    </section>
    <section id="ID-3ccb626553ea01666dc8d94204d1ed36"><title>Ordinary Paragraphs</title>
      <para>
	Ordinary paragraphs in a Pod document translate naturally to
	DocBook paragraphs.  Specifically, after any formatting codes are
	processed, the characters <literal
	role="code"><![CDATA[&lt;]]></literal>, <literal
	role="code"><![CDATA[&gt;]]></literal> and <literal
	role="code"><![CDATA[&amp;]]></literal> are translated to their
	respective SGML character entities, and the paragraph is wrapped in
	<emphasis role="bold">&lt;para&gt;</emphasis> and <emphasis
	role="bold">&lt;/para&gt;</emphasis>.
      </para>
      <para>
	For example, given this Pod paragraph:
      </para>
      <screen><![CDATA[Here is some text with I<italics> & an ampersand.]]></screen>
      <para>
	Pod::2::DocBook would produce DocBook markup similar to this:
      </para>
      <screen><![CDATA[<para>
  Here is some text with <emphasis role="italic">italics</emphasis>
  &amp; an ampersand.
</para>]]></screen>
      <para>
	Depending on your final output format, you may sometimes want
	double quotes in ordinary paragraphs to show up ultimately as
	"smart quotes" (little 66s and 99s).  Pod::2::DocBook offers a
	convenient mechanism for handling double quotes in ordinary
	paragraphs and letting your SGML toolchain manage their
	presentation: the <emphasis
	role="bold">fix_double_quotes</emphasis> option to <literal
	role="code"><![CDATA[new()]]></literal>.  If this option is set to
	a true value, Pod::2::DocBook will replace pairs of double quotes
	in ordinary paragraphs (and <emphasis role="italic">only</emphasis>
	in ordinary paragraphs) with <emphasis
	role="bold">&lt;quote&gt;</emphasis> and <emphasis
	role="bold">&lt;/quote&gt;</emphasis>.
      </para>
      <para>
	For example, given this Pod paragraph:
      </para>
      <screen><![CDATA[Here is some text with I<italics> & an "ampersand".]]></screen>
      <para>
	Pod::2::DocBook, with <emphasis
	role="bold">fix_double_quotes</emphasis> set, would produce DocBook
	markup similar to this:
      </para>
      <screen><![CDATA[<para>
  Here is some text with <emphasis role="italic">italics</emphasis>
  &amp; an <quote>ampersand</quote>.
</para>]]></screen>
      <para>
	If you have a paragraph with an odd number of double quotes, the
	last one will be left untouched, which may or may not be what you
	want.  If you have such a document, replace the unpaired double
	quote character with <emphasis
	role="bold">E&lt;quot&gt;</emphasis>, and Pod::2::DocBook should be
	able to give you the output you expect.  Also, if you have any
	<emphasis role="bold">=begin docbook</emphasis> ... <emphasis
	role="bold">=end docbook</emphasis> regions (see <link
	linkend="ID-196a22a8c2df08c5124ac933228893c0"><quote>Embedded
	DocBook Markup</quote></link>) in your Pod, you are responsible for
	managing your own quotes in those regions.
      </para>
    </section>
    <section id="ID-fa07cc0bd1c6f7a9156db36b87b3f979"><title>Verbatim Paragraphs</title>
      <para>
	Verbatim paragraphs translate even more naturally; <citerefentry>
	<refentrytitle>perlpodspec</refentrytitle> </citerefentry> mandates
	that absolutely no processing should be performed on them. So
	Pod::2::DocBook simply marks them as CDATA and wraps them in
	<emphasis role="bold">&lt;screen&gt;</emphasis> and <emphasis
	role="bold">&lt;/screen&gt;</emphasis>.  They are not indented the
	way ordinary paragraphs are, because they treat whitespace as
	significant.
      </para>
      <para>
	For example, given this verbatim paragraph (imagine there's leading
	whitespace in the source):
      </para>
      <screen><![CDATA[my $i = 10;
while (<> && $i--) {
    print "$i: $_";
}]]></screen>
      <para>
	Pod::2::DocBook would produce DocBook markup similar to this:
      </para>
      <screen><![CDATA[<screen><![CDATA[my $i = 10;
while (<> && $i--) {
    print "$i: $_";
}]] ></screen>]]></screen>
      <para>
	Multiple contiguous verbatim paragraphs are treated as a single
	<emphasis role="italic">screen</emphasis> element, with blank lines
	separating the paragraphs, as dictated by <citerefentry>
	<refentrytitle>perlpodspec</refentrytitle> </citerefentry>.
      </para>
    </section>
    <section id="ID-9b88b0d4ed55dfb1d3ad7985907bae35"><title>Command Paragraphs</title>
      <para>
        <variablelist>
          <varlistentry>
            <term><anchor id="ID-58454906696cb2a6c87e23d686e78a68" /><literal role="code"><![CDATA[=head1 Heading Text]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-1335f1a114390d3beda813f4039ce34e" /><literal role="code"><![CDATA[=head2 Heading Text]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-e04b9a4ea3772b834795269a404ddd3e" /><literal role="code"><![CDATA[=head3 Heading Text]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-2519bad75ba18bc36de30ea44abbf506" /><literal role="code"><![CDATA[=head4 Heading Text]]></literal></term>
            <listitem>
              <para>
		All of the Pod heading commands produce DocBook <emphasis
		role="italic">section</emphasis> elements, with the heading
		text as titles.  Pod::2::DocBook (<citerefentry>
		<refentrytitle>perlpod</refentrytitle> </citerefentry>)
		only allows for 4 heading levels, but DocBook allows
		arbitrary nesting; see <link
		linkend="ID-196a22a8c2df08c5124ac933228893c0"><quote>Embedded
		DocBook Markup</quote></link> if you need more than 4
		levels. Pod::2::DocBook only looks at relative heading
		levels to determine nesting.  For example, this bit of Pod:
              </para>
              <screen><![CDATA[=head1 1

Contents of section 1

=head2 1.1

Contents of section 1.1]]></screen>
              <para>
		and this bit of Pod:
              </para>
              <screen><![CDATA[=head1 1

Contents of section 1

=head3 1.1

Contents of section 1.1]]></screen>
              <para>
		both produce the same DocBook markup, which will look
		something like this:
              </para>
              <screen><![CDATA[<section id="article-My-Article-1"><title>1</title>
  <para>
    Contents of section 1
  </para>
  <section id="article-My-Article-1-1"><title>1.1</title>
    <para>
      Contents of section 1.1
    </para>
  </section>
</section>]]></screen>
              <para>
		Note that Pod::2::DocBook automatically generates section
		identifiers from your doctype, document title and section
		title.	It does the same when you make internal links (see
		<link
		linkend="ID-4570e0095b6f0df50bd649c88a7ea0ec"><quote>Formatting
		Codes</quote></link>, ensuring that if you supply the same
		link text as you did for the section title, the resulting
		identifiers will be the same.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-a29817cd6c532b9cf9f72ccd5a8af107" /><literal role="code"><![CDATA[=over indentlevel]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-b7474e185cfa92d33689733c8ce3b9a3" /><literal role="code"><![CDATA[=item stuff...]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-c825f1b04270d14bbc800bf886c61e69" /><literal role="code"><![CDATA[=back]]></literal></term>
            <listitem>
              <para>
		<literal role="code"><![CDATA[=over]]></literal> ...
		<literal role="code"><![CDATA[=back]]></literal> regions
		are somewhat complex, in that they can lead to a variety of
		DocBook constructs.  In every case, <emphasis
		role="italic">indentlevel</emphasis> is ignored by
		Pod::2::DocBook, since that's best left to your
		stylesheets.
              </para>
              <para>
		An <literal role="code"><![CDATA[=over]]></literal> ...
		<literal role="code"><![CDATA[=back]]></literal> region
		with no <literal role="code"><![CDATA[=item]]></literal>s
		represents indented text and maps directly to a DocBook
		<emphasis role="italic">blockquote</emphasis> element. 
		Given this source:
              </para>
              <screen><![CDATA[=over 4

This text should be indented.

=back]]></screen>
              <para>
		Pod::2::DocBook will produce DocBook markup similar to
		this:
              </para>
              <screen><![CDATA[<blockquote>
  <para>
    This text should be indented.
  </para>
</blockquote>]]></screen>
              <para>
		Inside an <literal role="code"><![CDATA[=over]]></literal>
		... <literal role="code"><![CDATA[=back]]></literal>
		region, <literal role="code"><![CDATA[=item]]></literal>
		commands generate lists.  The text that follows the first
		<literal role="code"><![CDATA[=item]]></literal> determines
		the type of list that will be output:
              </para>
              <para>
                <itemizedlist>
                  <listitem>
                    <para>
		      "*" (an asterisk) produces <emphasis
		      role="bold">&lt;itemizedlist&gt;</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
		      "1" or "1." produces <emphasis
		      role="bold">&lt;orderedlist numeration="arabic"&gt;</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
		      "a" or "a." produces <emphasis
		      role="bold">&lt;orderedlist numeration="loweralpha"&gt;</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
		      "A" or "A." produces <emphasis
		      role="bold">&lt;orderedlist numeration="upperalpha"&gt;</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
		      "i" or "i." produces <emphasis
		      role="bold">&lt;orderedlist numeration="lowerroman"&gt;</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
		      "I" or "I." produces <emphasis
		      role="bold">&lt;orderedlist numeration="upperroman"&gt;</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
		      anything else produces <emphasis
		      role="bold">&lt;variablelist&gt;</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
              <para>
		Since the output from each of these is relatively verbose,
		the best way to see examples is to actually render some Pod
		into DocBook.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-b99bd80afde7cd34dd41f6365b2c0dda" /><literal role="code"><![CDATA[=pod]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-e87c9217da2f3fa2056ae8e849b624e4" /><literal role="code"><![CDATA[=cut]]></literal></term>
            <listitem>
              <para>
		<citerefentry> <refentrytitle>Pod::Parser</refentrytitle>
		</citerefentry> recognizes these commands, and, therefore,
		so does Pod::2::DocBook, but they don't produce any output.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-12a693bf1d5f1aed0a9c9d54fd67510c" /><literal role="code"><![CDATA[=begin formatname]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-2c0052b81794e3ad8d577da4effb8add" /><literal role="code"><![CDATA[=end formatname]]></literal></term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-370265883b52083e54361edd4d8b22c6" /><literal role="code"><![CDATA[=for formatname text...]]></literal></term>
            <listitem>
              <para>
		Pod::2::DocBook supports two formats: <emphasis
		role="bold">docbook</emphasis>, explained in <link
		linkend="ID-196a22a8c2df08c5124ac933228893c0"><quote>Embedded
		DocBook Markup</quote></link>, and <emphasis
		role="bold">table</emphasis>, explained in <link
		linkend="ID-b46a76f311a349310b340a24793584ee"><quote>Simple
		Tables</quote></link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><anchor id="ID-0232a1220e1e79778e28ea38b236ea80" /><literal role="code"><![CDATA[=encoding encodingname]]></literal></term>
            <listitem>
              <para>
		This command is currently not supported.  If
		Pod::2::DocBook encounters a document that contains
		<literal role="code"><![CDATA[=encoding]]></literal>, it
		will ignore the command and report an error (<link
		linkend="ID-06a4ed7d4d26178d25881a051e14fb93"><quote>unknown
		command `%s' at line %d in file %s</quote></link>).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <section id="ID-196a22a8c2df08c5124ac933228893c0"><title>Embedded DocBook Markup</title>
        <para>
	  There are a wide range of DocBook structures for which there is
	  no Pod equivalent.  For these, you will have to provide your own
	  markup using <emphasis role="bold">=begin docbook</emphasis> ...
	  <emphasis role="bold">=end docbook</emphasis> or <emphasis
	  role="bold">=for docbook ...</emphasis>. Pod::2::DocBook will
	  directly output whatever text you provide, unprocessed, so it's
	  up to you to ensure that it's valid DocBook.
        </para>
        <para>
	  Images, footnotes and many inline elements are obvious candidates
	  for embedded markup.	Another possible use is nesting sections
	  more than four-deep.	For example, given this source:
        </para>
        <screen><![CDATA[=head1  1

This is Section 1

=head2 1.1

This is Section 1.1

=head3 1.1.1

This is Section 1.1.1

=head4 1.1.1.1

This is Section 1.1.1.1

=begin docbook

<section>
<title>1.1.1.1.1</title>
<para>This is Section 1.1.1.1.1</para>
</section>

=end docbook]]></screen>
        <para>
	  Pod::2::DocBook will generate DocBook markup similar to this:
        </para>
        <screen><![CDATA[

  <section id="article-My-Article-1"><title>1</title>
    <para>
      This is Section 1
    </para>
    <section id="article-My-Article-1-1"><title>1.1</title>
      <para>
    This is Section 1.1
      </para>
      <section id="article-My-Article-1-1-1"><title>1.1.1</title>
        <para>
      This is Section 1.1.1
        </para>
        <section id="article-My-Article-1-1-1-1"><title>1.1.1.1</title>
          <para>
        This is Section 1.1.1.1
          </para>
<section>
<title>1.1.1.1.1</title>
<para>This is Section 1.1.1.1.1</para>
</section>
        </section>
      </section>
    </section>
  </section>]]></screen>
      </section>
      <section id="ID-b46a76f311a349310b340a24793584ee"><title>Simple Tables</title>
        <para>
	  Pod::2::DocBook also provides a mechanism for generating basic
	  tables with <emphasis role="bold">=begin table</emphasis>
	  and <emphasis role="bold">=end docbook</emphasis>.  If you
	  have simple tabular data or a CSV file exported from some
	  application, Pod::2::DocBook makes it easy to generate a table
	  from your data.  The syntax is intended to be simple, so
	  DocBook's entire table feature set is not represented, but even
	  if you do need more complex table markup than Pod::2::DocBook
	  produces, you can rapidly produce some markup which you can
	  hand-edit and then embed directly in your Pod with <emphasis
	  role="bold">=begin docbook</emphasis> ... <emphasis
	  role="bold">=end docbook</emphasis>.  Each table definition
	  spans multiple lines, so there is no equivalent <emphasis
	  role="bold">=for table</emphasis> command.
        </para>
        <para>
	  The first line of a table definition gives the table's title. 
	  The second line gives a list of comma-separated column
	  specifications (really just column alignments), each of which can
	  be <emphasis role="bold">left</emphasis>, <emphasis
	  role="bold">center</emphasis> or <emphasis
	  role="bold">right</emphasis>.  The third line is a list of
	  comma-separated column headings, and every subsequent line
	  consists of comma-separated row data.  If any of your data
	  actually contain commas, you can enclose them in double quotes;
	  if they also contain double quotes, you must escape the inner
	  quotes with backslashes (typical CSV stuff).
        </para>
        <para>
	  Here's an example:
        </para>
        <screen><![CDATA[=begin table

Sample Table
left,center,right
Powers of Ten,Planets,Dollars
10,Earth,$1
100,Mercury,$5
1000,Mars,$10
10000,Venus,$20
100000,"Jupiter, Saturn",$50

=end table]]></screen>
        <para>
	  And here's what Pod::2::DocBook would do with it:
        </para>
        <screen><![CDATA[<table>
  <title>Sample Table</title>
  <tgroup cols="3">
    <colspec align="left">
    <colspec align="center">
    <colspec align="right">
    <thead>
      <row>
        <entry>Powers of Ten</entry>
        <entry>Planets</entry>
        <entry>Dollars</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>10</entry>
        <entry>Earth</entry>
        <entry>$1</entry>
      </row>
      <row>
        <entry>100</entry>
        <entry>Mercury</entry>
        <entry>$5</entry>
      </row>
      <row>
        <entry>1000</entry>
        <entry>Mars</entry>
        <entry>$10</entry>
      </row>
      <row>
        <entry>10000</entry>
        <entry>Venus</entry>
        <entry>$20</entry>
      </row>
      <row>
        <entry>100000</entry>
        <entry>Jupiter, Saturn</entry>
        <entry>$50</entry>
      </row>
    </tbody>
  </tgroup>
</table>]]></screen>
      </section>
    </section>
    <section id="ID-4570e0095b6f0df50bd649c88a7ea0ec"><title>Formatting Codes</title>
      <para>
	Pod formatting codes render directly into DocBook as inline
	elements:
      </para>
      <para>
        <itemizedlist>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[I<text>]]></literal>
            </para>
            <screen><![CDATA[<emphasis role="italic">text</emphasis>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[B<text>]]></literal>
            </para>
            <screen><![CDATA[<emphasis role="bold">text</emphasis>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[C<code>]]></literal>
            </para>
            <screen><![CDATA[<literal role="code"><![CDATA[code]] ></literal>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<name>]]></literal>
            </para>
            <screen><![CDATA[<citerefentry><refentrytitle>name</refentrytitle></citerefentry>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<name(n)>]]></literal>
            </para>
            <screen><![CDATA[<citerefentry><refentrytitle>name</refentrytitle>
<manvolnum>n</manvolnum></citerefentry>

]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<name/"sec">]]></literal> or
	      <literal role="code"><![CDATA[L<name/sec>]]></literal>
            </para>
            <screen><![CDATA[<quote>sec</quote> in <citerefentry>
<refentrytitle>name</refentrytitle></citerefentry>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<name(n)/"sec">]]></literal>
	      or <literal role="code"><![CDATA[L<name(n)/sec>]]></literal>
            </para>
            <screen><![CDATA[<quote>sec</quote> in <citerefentry>
<refentrytitle>name</refentrytitle><manvolnum>n</manvolnum>
</citerefentry>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L</"sec">]]></literal> or
	      <literal role="code"><![CDATA[L</sec>]]></literal> or 
	      <literal role="code"><![CDATA[L<"sec">]]></literal>
            </para>
            <screen><![CDATA[<link linkend="article-My-Article-sec"><quote>sec</quote></link>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<text|name>]]></literal>
            </para>
            <screen><![CDATA[text]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<text|name/"sec">]]></literal>
	      or <literal
	      role="code"><![CDATA[L<text|name/sec>]]></literal>
            </para>
            <screen><![CDATA[text]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<text|/"sec">]]></literal> or
	      <literal role="code"><![CDATA[L<text|/sec>]]></literal> or
	      <literal role="code"><![CDATA[L<text|"sec">]]></literal>
            </para>
            <screen><![CDATA[<link linkend="article-My-Article-sec"><quote>text</quote></link>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[L<scheme:...>]]></literal>
            </para>
            <screen><![CDATA[<ulink url="scheme:...">scheme:...</ulink>]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[E<verbar>]]></literal>
            </para>
            <screen><![CDATA[|]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[E<sol>]]></literal>
            </para>
            <screen><![CDATA[/]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[E<number>]]></literal>
            </para>
            <screen><![CDATA[&#number;]]></screen>
          </listitem>
          <listitem>
            <para>
	      any other <literal
	      role="code"><![CDATA[E<escape>]]></literal>
            </para>
            <screen><![CDATA[&escape;]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[F<filename>]]></literal>
            </para>
            <para>
	      &lt;filename&gt;filename&lt;/filename&gt;
            </para>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[S<text with
	      spaces>]]></literal>
            </para>
            <screen><![CDATA[text with spaces]]></screen>
          </listitem>
          <listitem>
            <para>
	      <literal role="code"><![CDATA[X<topic name>]]></literal>
            </para>
            <para>
	      &lt;indexterm&gt;&lt;primary&gt;topic
	      name&lt;/primary&gt;&lt;/indexterm&gt;
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>
  <section id="ID-27c872f13298ab7cc42f6e59e6373302"><title>DIAGNOSTICS</title>
    <para>
      Pod::2::DocBook makes every possible effort to produce valid DocBook
      markup, even with malformed POD source.  Any processing errors will
      be noted in comments at the end of the output document.  Even when
      errors occur, Pod::2::DocBook always reads the entire input document
      and never exits with a non-zero status.
    </para>
    <screen><![CDATA[]]></screen>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor id="ID-06a4ed7d4d26178d25881a051e14fb93" />unknown command `%s' at line %d in file %s</term>
          <listitem>
            <para>
	      See <quote>Command Paragraph</quote> in <citerefentry>
	      <refentrytitle>perlpod</refentrytitle> </citerefentry> for a
	      list of valid commands.  The command referenced in the error
	      message was ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-31e05a35ed3fb88d0fd4ebd1102beef8" />formatting code `%s' nested within `%s' at line %d in file %s</term>
          <listitem>
            <para>
	      See <quote>Formatting Codes</quote> in <citerefentry>
	      <refentrytitle>perlpod</refentrytitle> </citerefentry> for
	      details on which formatting codes can be nested.	The
	      offending code was translated into the output document as the
	      raw text inside its angle brackets.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-fd700e35a09475c7b3cd7fea987c59b4" />unknown formatting code `%s' at line in file %s</term>
          <listitem>
            <para>
	      The input contained a formatting code not listed in
	      <citerefentry> <refentrytitle>perlpod</refentrytitle>
	      </citerefentry>; it was translated into the output document
	      as the raw text inside the angle brackets.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-be52c2023179b57a3ca12bfb530310a6" />empty L&lt;&gt; at line %d in file %s</term>
          <listitem>
            <para>
	      Self-explanatory.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-a8d63ea0972a3d6d803146eab91ef3a5" />invalid escape `%s' at line %d in file %s</term>
          <listitem>
            <para>
	      Self-explanatory; it was translated into the output document
	      as the raw text inside the angle brackets.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-e06be26197418681472933e1fb03680d" />=item must be inside an =over ... =back section at line %d in file %s</term>
          <listitem>
            <para>
	      Self-explanatory.  The `=item' referenced in the error was
	      ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-379e30361b6d059c44669fbda3b1751f" />`=end %s' found but current region opened with `=begin %s'</term>
          <listitem>
            <para>
	      The closest `=end' command to the referenced `=begin' didn't
	      match; processing continued as if the mismatched `=end'
	      wasn't there.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-feef62d526bd09b2ab8a40eb49c62b03" />no matching `=end' for `=begin %s'</term>
          <listitem>
            <para>
	      Pod::2::DocBook reached the end of its input without finding
	      an `=end' command to match the `=begin' referenced in the
	      error; end-of-file processing continued.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-9affd676b2db4a912b944ab88246477b" />unknown colspec `%s' in table at line %d in file %s</term>
          <listitem>
            <para>
	      See <link
	      linkend="ID-b46a76f311a349310b340a24793584ee"><quote>Simple
	      Tables</quote></link> for a list of supported column
	      specifications.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor id="ID-81156132f37558444485f99022408011" />encountered unknown state `%s' (this should never happen)</term>
          <listitem>
            <para>
	      The state referred to is an internal variable used to
	      properly manage nested DocBook structures.  You should indeed
	      never see this message, but if you do, you should contact the
	      module's author.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </section>
  <section id="ID-d5349a6e5f4c1526564fb292de4e7d2d"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>pod2docbook</refentrytitle>
      </citerefentry>, <citerefentry>
      <refentrytitle>perlpod</refentrytitle> </citerefentry>, <ulink
      url="http://www.docbook.org/">http://www.docbook.org/</ulink>,
      <citerefentry> <refentrytitle>Pod::DocBook</refentrytitle>
      </citerefentry>, SVN repo - <ulink
      url="https://cle.sk/repos/pub/cpan/Pod-2-DocBook/">https://cle.sk/repos/pub/cpan/Pod-2-DocBook/</ulink>,
      <ulink
      url="http://www.ohloh.net/projects/pod-2-docbook">http://www.ohloh.net/projects/pod-2-docbook</ulink>
    </para>
  </section>
  <section id="ID-d31c735431a53065e998e51b8caaeab9"><title>AUTHOR</title>
    <para>
      Alligator Descartes &lt;descarte@symbolstone.org&gt; wrote a module
      called Pod::2::DocBook, which was later maintained by Jan Iven
      &lt;jan.iven@cern.ch&gt;.  That module was based on the original
      <citerefentry> <refentrytitle>pod2html</refentrytitle>
      </citerefentry> by Tom Christiansen &lt;tchrist@mox.perl.com&gt;.
    </para>
    <para>
      Nandu Shah &lt;nandu@zvolve.com&gt; wrote Pod::DocBook, which is
      unrelated to the previous module (even though they both perform the
      same function). (<ulink
      url="http://search.cpan.org/~nandu/Pod-DocBook-1.2/">http://search.cpan.org/~nandu/Pod-DocBook-1.2/</ulink>)
    </para>
    <para>
      Jozef Kutej &lt;jkutej@cpan.org&gt; renamed the module to
      Pod::2::DocBook because Nandus version was buried in the CPAN archive
      as an "UNAUTHORIZED RELEASE".
    </para>
  </section>
  <section id="ID-335792c2f7239c818aca02212dab7b2d"><title>COPYRIGHT</title>
    <para>
      Copyright 2004, Nandu Shah &lt;nandu@zvolve.com&gt;
    </para>
    <para>
      Copyright 2008, Jozef Kutej &lt;jkutej@cpan.org&gt;
    </para>
    <para>
      This library is free software; you may redistribute it and/or modify
      it under the same terms as Perl itself
    </para>
  </section>
</section>
